-file("erlang/src/bead.erl", 1).

-module(bead).

-compile(export_all).

worker(V1, V2, V3) ->
    collect:track(squasher_mocked_fun_worker(collect:track(V1,
                                                           [{dom, 1, 3},
                                                            {name,
                                                             "worker",
                                                             3}]),
                                             collect:track(V2,
                                                           [{dom, 2, 3},
                                                            {name,
                                                             "worker",
                                                             3}]),
                                             collect:track(V3,
                                                           [{dom, 3, 3},
                                                            {name,
                                                             "worker",
                                                             3}])),
                  [{rng, 3}, {name, "worker", 3}]).

squasher_mocked_fun_worker(Pid, F, E) ->
    case F(E) of
        true ->
            Pid ! {true, E};
        _ ->
            Pid ! false
    end.

collector(V1, V2, V3) ->
    collect:track(squasher_mocked_fun_collector(collect:track(V1,
                                                              [{dom, 1,
                                                                3},
                                                               {name,
                                                                "collec"
                                                                "tor",
                                                                3}]),
                                                collect:track(V2,
                                                              [{dom, 2,
                                                                3},
                                                               {name,
                                                                "collec"
                                                                "tor",
                                                                3}]),
                                                collect:track(V3,
                                                              [{dom, 3,
                                                                3},
                                                               {name,
                                                                "collec"
                                                                "tor",
                                                                3}])),
                  [{rng, 3}, {name, "collector", 3}]).

squasher_mocked_fun_collector(MainPid, FinishedNum, MaxNum) ->
    receive
        {true, E} ->
            MainPid ! {true, E};
        false ->
            if
                FinishedNum >= MaxNum ->
                    MainPid ! false;
                true ->
                    collect:track(squasher_mocked_fun_collector(MainPid,
                                                                collect:track(FinishedNum
                                                                              +
                                                                              1,
                                                                              [{dom,
                                                                                2,
                                                                                3},
                                                                               {name,
                                                                                "colle"
                                                                                "ctor",
                                                                                3}]),
                                                                MaxNum),
                                  [{rng, 3}, {name, "collector", 3}])
            end
    end.

pany(V1, V2) ->
    collect:track(squasher_mocked_fun_pany(collect:track(V1,
                                                         [{dom, 1, 2},
                                                          {name,
                                                           "pany",
                                                           2}]),
                                           collect:track(V2,
                                                         [{dom, 2, 2},
                                                          {name,
                                                           "pany",
                                                           2}])),
                  [{rng, 2}, {name, "pany", 2}]).

squasher_mocked_fun_pany(F, L) ->
    MyPid = self(),
    Collector =
        spawn(fun() ->
                     collector(MyPid, 0, lists:flatlength(L))
              end),
    Pids =
        [ 
         spawn(fun() ->
                      worker(Collector, F, E)
               end) ||
             E <- L
        ],
    Collector,
    receive
        false ->
            false;
        {true, Res} ->
            [ 
             exit(P, normal) ||
                 P <- Pids
            ],
            {true, Res}
    end.

test(V1) ->
    collect:track(squasher_mocked_fun_test(collect:track(V1,
                                                         [{dom, 1, 1},
                                                          {name,
                                                           "test",
                                                           1}])),
                  [{rng, 1}, {name, "test", 1}]).

squasher_mocked_fun_test(L) ->
    lists:sort(L).



